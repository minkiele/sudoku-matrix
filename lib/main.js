(()=>{"use strict";var t={d:(e,i)=>{for(var r in i)t.o(i,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:i[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{SudokuMatrix:()=>r});class i{tuple;constructor(t){this.tuple=t}isValid(){for(let t=1;t<=this.tuple.length;t+=1)if(!this.tuple.some((e=>e.value===t)))throw new Error(`Missing Value ${t} in a tuple`);return!0}}class r{matrix;constructor(t){this.matrix=t}isRowValid(t){const e=this.matrix[t].map(((e,i)=>({value:e,row:t,col:i})));new i(e).isValid()}isColValid(t){const e=this.matrix.map(((e,i)=>({value:e[t],row:i,col:t})));new i(e).isValid()}isSquareValid(t){const e=3*Math.floor(t/3),r=t%3*3,o=[];for(let t=0;t<3;t+=1)o.concat(this.matrix[t+e].slice(r,r+3).map(((i,o)=>({value:i,row:t+e,col:o+r}))));new i(o).isValid()}isValid(){try{for(let t=0;t<9;t+=1)this.isRowValid(t),this.isColValid(t),this.isSquareValid(t);return!0}catch(t){return!1}}}module.exports=e})();